{"paragraphs":[{"text":"%md\n\n# Transfert des données du bucket S3 vers les tables Cassandra ","user":"anonymous","dateUpdated":"2020-02-04T16:19:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Transfert des données du bucket S3 vers les tables Cassandra</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1580833046635_-463375378","id":"20200204-161726_468257272","dateCreated":"2020-02-04T16:17:26+0000","dateStarted":"2020-02-04T16:19:31+0000","dateFinished":"2020-02-04T16:19:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2187"},{"title":"Importation","text":"import sys.process._\nimport java.net.URL\nimport java.io.File\nimport java.io.File\nimport java.nio.file.{Files, StandardCopyOption}\nimport java.net.HttpURLConnection \nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.IntegerType\nimport scala.util.matching.Regex\n\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicSessionCredentials\n\nimport org.apache.hadoop.fs.s3a.S3AFileSystem\nimport com.amazonaws.services.s3.transfer.TransferManager\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757067_-1870256278","id":"20200123-121036_538125188","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2188"},{"text":"val plage = \"/201902*\"\n\n// --\nval bucketname =\"your_bucket\"","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757072_1597208962","id":"20200123-114114_1415219617","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2189"},{"title":"Event Table","text":"import org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\n// 20181201000000.export.CSV.zip\nval textRDD = sc.binaryFiles(\"s3a://\"+bucketname + plage + \".export.CSV.zip\"). // event + translate.event\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n    \n\n\nval EventDF = textRDD.toDF().withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n        .withColumn(\"Day\", split($\"value\", \"\\\\t\").getItem(1))\n        .withColumn(\"MonthYear\", split($\"value\", \"\\\\t\").getItem(2))\n        .withColumn(\"Year\", split($\"value\", \"\\\\t\").getItem(3))\n        .withColumn(\"FractionDate\", split($\"value\", \"\\\\t\").getItem(4))\n        .withColumn(\"Actor1Code\", split($\"value\", \"\\\\t\").getItem(5))\n        .withColumn(\"Actor1Name\", split($\"value\", \"\\\\t\").getItem(6))\n        .withColumn(\"Actor1CountryCode\", split($\"value\", \"\\\\t\").getItem(7))\n        .withColumn(\"Actor1KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(8))\n        .withColumn(\"Actor1EthnicCode\", split($\"value\", \"\\\\t\").getItem(9))\n        .withColumn(\"Actor1Religion1Code\", split($\"value\", \"\\\\t\").getItem(10))\n        .withColumn(\"Actor1Religion2Code\", split($\"value\", \"\\\\t\").getItem(11))\n        .withColumn(\"Actor1Type1Code\", split($\"value\", \"\\\\t\").getItem(12))\n        .withColumn(\"Actor1Type2Code\", split($\"value\", \"\\\\t\").getItem(13))\n        .withColumn(\"Actor1Type3Code\", split($\"value\", \"\\\\t\").getItem(14))\n        .withColumn(\"Actor2Code\", split($\"value\", \"\\\\t\").getItem(15))\n        .withColumn(\"Actor2Name\", split($\"value\", \"\\\\t\").getItem(16))\n        .withColumn(\"Actor2CountryCode\", split($\"value\", \"\\\\t\").getItem(17))\n        .withColumn(\"Actor2KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(18))\n        .withColumn(\"Actor2EthnicCode\", split($\"value\", \"\\\\t\").getItem(19))\n        .withColumn(\"Actor2Religion1Code\", split($\"value\", \"\\\\t\").getItem(20))\n        .withColumn(\"Actor2Religion2Code\", split($\"value\", \"\\\\t\").getItem(21))\n        .withColumn(\"Actor2Type1Code\", split($\"value\", \"\\\\t\").getItem(22))\n        .withColumn(\"Actor2Type2Code\", split($\"value\", \"\\\\t\").getItem(23))\n        .withColumn(\"Actor2Type3Code\", split($\"value\", \"\\\\t\").getItem(24))\n        .withColumn(\"IsRootEvent\", split($\"value\", \"\\\\t\").getItem(25))\n        .withColumn(\"EventCode\", split($\"value\", \"\\\\t\").getItem(26))\n        .withColumn(\"EventBaseCode\", split($\"value\", \"\\\\t\").getItem(27))\n        .withColumn(\"EventRootCode\", split($\"value\", \"\\\\t\").getItem(28))\n        .withColumn(\"QuadClass\", split($\"value\", \"\\\\t\").getItem(29))\n        .withColumn(\"GoldsteinScale\", split($\"value\", \"\\\\t\").getItem(30))\n        .withColumn(\"NumMentions\", split($\"value\", \"\\\\t\").getItem(31))\n        .withColumn(\"NumSources\", split($\"value\", \"\\\\t\").getItem(32))\n        .withColumn(\"NumArticles\", split($\"value\", \"\\\\t\").getItem(33))\n        .withColumn(\"AvgTone\", split($\"value\", \"\\\\t\").getItem(34))\n        .withColumn(\"Actor1Geo_Type\", split($\"value\", \"\\\\t\").getItem(35))\n        .withColumn(\"Actor1Geo_FullName\", split($\"value\", \"\\\\t\").getItem(36))\n        .withColumn(\"Actor1Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(37))\n        .withColumn(\"Actor1Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(38))\n        .withColumn(\"Actor1Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(39))\n        .withColumn(\"Actor1Geo_Lat\", split($\"value\", \"\\\\t\").getItem(40))\n        .withColumn(\"Actor1Geo_Long\", split($\"value\", \"\\\\t\").getItem(41))\n        .withColumn(\"Actor1Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(42))\n        .withColumn(\"Actor2Geo_Type\", split($\"value\", \"\\\\t\").getItem(43))\n        .withColumn(\"Actor2Geo_FullName\", split($\"value\", \"\\\\t\").getItem(44))\n        .withColumn(\"Actor2Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(45))\n        .withColumn(\"Actor2Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(46))\n        .withColumn(\"Actor2Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(47))\n        .withColumn(\"Actor2Geo_Lat\", split($\"value\", \"\\\\t\").getItem(48))\n        .withColumn(\"Actor2Geo_Long\", split($\"value\", \"\\\\t\").getItem(49))\n        .withColumn(\"Actor2Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(50))\n        .withColumn(\"ActionGeo_Type\", split($\"value\", \"\\\\t\").getItem(51))\n        .withColumn(\"ActionGeo_FullName\", split($\"value\", \"\\\\t\").getItem(52))\n        .withColumn(\"ActionGeo_CountryCode\", split($\"value\", \"\\\\t\").getItem(53))\n        .withColumn(\"ActionGeo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(54))\n        .withColumn(\"ActionGeo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(55))\n        .withColumn(\"ActionGeo_Lat\", split($\"value\", \"\\\\t\").getItem(56))\n        .withColumn(\"ActionGeo_Long\", split($\"value\", \"\\\\t\").getItem(57))\n        .withColumn(\"ActionGeo_FeatureID\", split($\"value\", \"\\\\t\").getItem(58))\n        .withColumn(\"DATEADDED\", split($\"value\", \"\\\\t\").getItem(59))\n        .withColumn(\"SOURCEURL\", split($\"value\", \"\\\\t\").getItem(60))\n\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757072_-1525565635","id":"20200120-133727_1808680408","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2190"},{"text":"val event_use = EventDF.select(\"GLOBALEVENTID\",\"Day\",\"MonthYear\",\"Year\",\"NumArticles\",\"ActionGeo_CountryCode\").withColumn(\"GLOBALEVENTID\",$\"GLOBALEVENTID\".cast(\"int\"))\n\n// event_use.show()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757072_599452447","id":"20200120-134443_327781834","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2191"},{"title":"Mentions Table","text":"// chargement fichier mention\nval mentionRDD = sc.binaryFiles(\"s3a://\"+bucketname+plage+\".mentions.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n    \n\n\n\nval mentionDF = mentionRDD.toDF().withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n        .withColumn(\"EventTimeDate\", split($\"value\", \"\\\\t\").getItem(1))\n        .withColumn(\"MentionTimeDate\", split($\"value\", \"\\\\t\").getItem(2))\n        .withColumn(\"MentionType\", split($\"value\", \"\\\\t\").getItem(3))\n        .withColumn(\"MentionSourceName\", split($\"value\", \"\\\\t\").getItem(4))\n        .withColumn(\"MentionIdentifier\", split($\"value\", \"\\\\t\").getItem(5))\n        .withColumn(\"SentenceID\", split($\"value\", \"\\\\t\").getItem(6))\n        .withColumn(\"Actor1CharOffset\", split($\"value\", \"\\\\t\").getItem(7))\n        .withColumn(\"Actor2CharOffset\", split($\"value\", \"\\\\t\").getItem(8))\n        .withColumn(\"ActionCharOffset\", split($\"value\", \"\\\\t\").getItem(9))\n        .withColumn(\"InRawText\", split($\"value\", \"\\\\t\").getItem(10))\n        .withColumn(\"Confidence\", split($\"value\", \"\\\\t\").getItem(11))\n        .withColumn(\"MentionDocLen\", split($\"value\", \"\\\\t\").getItem(12))\n        .withColumn(\"MentionDocTone\", split($\"value\", \"\\\\t\").getItem(13))\n        .withColumn(\"MentionDocTranslationInfo\", split($\"value\", \"\\\\t\").getItem(14))\n        .withColumn(\"Extras\", split($\"value\", \"\\\\t\").getItem(15))\n\n\nval mention_use = mentionDF.select(\"GLOBALEVENTID\",\"MentionDocTranslationInfo\").withColumn(\"GLOBALEVENTID\",$\"GLOBALEVENTID\".cast(\"int\"))\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757072_2067727947","id":"20200116-154100_1270151433","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2192"},{"title":"Join table","text":"val DF_MENTION_CLEAN =  mentionDF.withColumn(\"MentionDocTranslationInfo\", when($\"MentionDocTranslationInfo\".isNull or $\"MentionDocTranslationInfo\"===\"\",\"eng\").otherwise(substring(col(\"MentionDocTranslationInfo\"), 7,3)))\n\nval EVENT_MENTION = EventDF.join(DF_MENTION_CLEAN,\"GLOBALEVENTID\")\n\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757073_-1119605635","id":"20200117-080032_138362858","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2193"},{"title":"REQUETE 1:","text":"\nval DF_Mention_par_langue = DF_MENTION_CLEAN.groupBy(\"GLOBALEVENTID\",\"MentionDocTranslationInfo\").count().withColumnRenamed(\"count\",\"NbPostMentions\") //Nombre de mentions (articles) par evenement dans chaque langue\n\nval DF_Event_Mention_1 = EventDF.select(\"GLOBALEVENTID\",\"Day\",\"NumArticles\",\"ActionGeo_CountryCode\").join(DF_Mention_par_langue,\"GLOBALEVENTID\")\n\nval DF_RQ_1 = DF_Event_Mention_1.groupBy(\"Day\",\"ActionGeo_CountryCode\",\"MentionDocTranslationInfo\").agg(sum($\"NbPostMentions\").as(\"NbTotalMentions\"),count(\"GLOBALEVENTID\").as(\"NbEvents\"))","user":"anonymous","dateUpdated":"2020-02-04T16:21:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:23: error: not found: value DF_MENTION_CLEAN\n       val DF_Mention_par_langue = DF_MENTION_CLEAN.groupBy(\"GLOBALEVENTID\",\"MentionDocTranslationInfo\").count().withColumnRenamed(\"count\",\"NbPostMentions\") //Nombre de mentions (articles) par evenement dans chaque langue\n                                   ^\n<console>:25: error: not found: value EventDF\n       val DF_Event_Mention_1 = EventDF.select(\"GLOBALEVENTID\",\"Day\",\"NumArticles\",\"ActionGeo_CountryCode\").join(DF_Mention_par_langue,\"GLOBALEVENTID\")\n                                ^\n"}]},"apps":[],"jobName":"paragraph_1580832757075_1084947460","id":"20200117-085209_859232046","dateCreated":"2020-02-04T16:12:37+0000","dateStarted":"2020-02-04T16:21:29+0000","dateFinished":"2020-02-04T16:21:54+0000","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:2194"},{"text":"DF_RQ_1.show(false)","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757075_690346044","id":"20200123-162233_378223723","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2195"},{"title":"Transfert vers Cassandra","text":"val DF_RQ_1_low = DF_RQ_1.toDF(DF_RQ_1.columns map(_.toLowerCase): _*)\n       \nDF_RQ_1_low.write.mode(\"append\")\n           .format(\"org.apache.spark.sql.cassandra\")\n           .options(Map(\"table\" -> \"requete_1\", \"keyspace\" -> \"gdelt\"))\n           .save()","user":"anonymous","dateUpdated":"2020-02-04T16:15:22+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757075_-1368281204","id":"20200123-161535_1088245431","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2196"},{"title":"REQUETE 2:","text":"// Creation des dataframes utiles \n\n\nval Event_num_mention = EventDF.select(\"GLOBALEVENTID\",\"ActionGeo_CountryCode\",\"NumMentions\",\"DAY\").withColumn(\"GLOBALEVENTID\",$\"GLOBALEVENTID\".cast(\"int\")).withColumn(\"NumMentions\",$\"NumMentions\".cast(\"int\"))\n\nval df_events_separate = Event_num_mention.withColumn(\"month\",substring(col(\"DAY\"),5,2)).withColumn(\"year\",substring(col(\"DAY\"), 0,4)).withColumn(\"day\",substring(col(\"DAY\"),6,2))\n\n\n// Requete\n\nval df_requete_2 = df_events_separate.sort(desc(\"NumMentions\"))\n\n\n// df_requete_2.show()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757076_-251031948","id":"20200117-151721_485744854","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2197"},{"title":"Transfert to cassandra","text":"val DF_RQ_2_low = df_requete_2.toDF(df_requete_2.columns map(_.toLowerCase): _*)\n       \nDF_RQ_2_low.write.mode(\"append\")\n           .format(\"org.apache.spark.sql.cassandra\")\n           .options(Map(\"table\" -> \"requete_2\", \"keyspace\" -> \"gdelt\"))\n           .save()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757076_-1662042805","id":"20200123-165142_1641403364","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2198"},{"title":"Gkg and Gkg translate Table","text":"import org.apache.spark.sql.functions.explode\n\n// chargement fichier gkg\n\nval gkg_RDD = sc.binaryFiles(\"s3a://\"+bucketname+plage+\".gkg.csv.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n    \nval Gkg_DF = gkg_RDD.toDF().withColumn(\"GKGRECORDID\", split($\"value\", \"\\\\t\").getItem(0))\n.withColumn(\"DATE\", split($\"value\", \"\\\\t\").getItem(1))\n.withColumn(\"SourceCollectionIdentifier\", split($\"value\", \"\\\\t\").getItem(2))\n.withColumn(\"SourceCommonName\", split($\"value\", \"\\\\t\").getItem(3))\n.withColumn(\"DocumentIdentifier\", split($\"value\", \"\\\\t\").getItem(4))\n.withColumn(\"Counts\", split($\"value\", \"\\\\t\").getItem(5))\n.withColumn(\"V2Counts\", split($\"value\", \"\\\\t\").getItem(6))\n.withColumn(\"Themes\", split($\"value\", \"\\\\t\").getItem(7))\n.withColumn(\"V2Themes\", split($\"value\", \"\\\\t\").getItem(8))\n.withColumn(\"Locations\", split($\"value\", \"\\\\t\").getItem(9))\n.withColumn(\"V2Locations\", split($\"value\", \"\\\\t\").getItem(10))\n.withColumn(\"Persons\", split($\"value\", \"\\\\t\").getItem(11))\n.withColumn(\"V2Persons\", split($\"value\", \"\\\\t\").getItem(12))\n.withColumn(\"Organizations\", split($\"value\", \"\\\\t\").getItem(13))\n.withColumn(\"V2Organizations\", split($\"value\", \"\\\\t\").getItem(14))\n.withColumn(\"V2Tone\", split($\"value\", \"\\\\t\").getItem(15))\n.withColumn(\"Dates\", split($\"value\", \"\\\\t\").getItem(16))\n.withColumn(\"GCAM\", split($\"value\", \"\\\\t\").getItem(17))\n.withColumn(\"SharingImage\", split($\"value\", \"\\\\t\").getItem(18))\n.withColumn(\"RelatedImages\", split($\"value\", \"\\\\t\").getItem(19))\n.withColumn(\"SocialImageEmbeds\", split($\"value\", \"\\\\t\").getItem(20))\n.withColumn(\"SocialVideoEmbeds\", split($\"value\", \"\\\\t\").getItem(21))\n.withColumn(\"Quotations\", split($\"value\", \"\\\\t\").getItem(22))\n.withColumn(\"AllNames\", split($\"value\", \"\\\\t\").getItem(23))\n.withColumn(\"Amounts\", split($\"value\", \"\\\\t\").getItem(24))\n.withColumn(\"TranslationInfo\", split($\"value\", \"\\\\t\").getItem(25))\n.withColumn(\"Extras\", split($\"value\", \"\\\\t\").getItem(26))\n\n\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757076_-1778133968","id":"20200117-161641_576470030","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2199"},{"title":"Requête 3","text":"// Création de dataframe pour obtenir les thèmes \n\nval Gkg_use = Gkg_DF.select(\"DocumentIdentifier\",\"SourceCommonName\",\"DATE\",\"V2Themes\",\"V2Tone\").withColumn(\"Theme\",split($\"V2Themes\",\";\")).withColumn(\"Tone\",split($\"V2Tone\",\",\")(0))\n\nval Gkg_theme = Gkg_use.select($\"DocumentIdentifier\",$\"SourceCommonName\",$\"DATE\",explode($\"Theme\"),$\"Tone\")\n\nval Gkg_theme_2 = Gkg_theme.withColumn(\"theme\",split($\"col\",\",\")(0)).withColumn(\"day\",substring(col(\"DATE\"),6,2)).withColumn(\"month\",substring(col(\"DATE\"),5,2)).withColumn(\"year\",substring(col(\"DATE\"), 0,4)).drop(\"col\",\"DATE\")\n\nval Gkg_theme_final = Gkg_theme_2.dropDuplicates(\"DocumentIdentifier\", \"Theme\").filter(!($\"theme\" === \"\")).cache\n\nval Gkg_theme_tone = Gkg_theme_final.select(\"SourceCommonName\",\"day\",\"month\",\"year\",\"theme\",\"tone\").groupBy(\"SourceCommonName\",\"day\",\"month\",\"year\",\"theme\").agg(mean(\"tone\"),count(\"SourceCommonName\")).withColumnRenamed(\"count(SourceCommonName)\",\"NbArticles\").cache()\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757076_1450634160","id":"20200123-105450_2095092029","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2200"},{"text":"Gkg_theme_tone.show(false)","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757077_-1914607531","id":"20200121-192103_2027289019","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2201"},{"title":"Transfert to Cassandra","text":"val DF_RQ_3_1_low = Gkg_theme_tone.toDF(Gkg_theme_tone.columns map(_.toLowerCase): _*)\n                                .withColumnRenamed(\"avg(tone)\", \"avg_tone\")\n                                .filter($\"sourcecommonname\"=!=\"\")\n                                .filter($\"day\"=!=\"\")\n                                .filter($\"month\"=!=\"\")\n                                .filter($\"year\"=!=\"\")\n                                .filter($\"theme\"=!=\"\")\n\n       \nDF_RQ_3_1_low.write.mode(\"append\")\n           .format(\"org.apache.spark.sql.cassandra\")\n           .options(Map(\"table\" -> \"requete_3_1\", \"keyspace\" -> \"gdelt\"))\n           .save()","user":"anonymous","dateUpdated":"2020-02-04T16:42:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757077_748086851","id":"20200123-165451_1756109316","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2202"},{"text":"// Création de dataframe pour obtenir les personnes / date / ton moyen\n\nval Gkg_use_person = Gkg_DF.select(\"DocumentIdentifier\",\"SourceCommonName\",\"DATE\",\"V2Persons\",\"V2Tone\").withColumn(\"Person\",split($\"V2Persons\",\";\")).withColumn(\"Tone\",split($\"V2Tone\",\",\")(0)).drop(\"col\",\"V2Tone\")\n\nval Gkg_person = Gkg_use_person.select($\"DocumentIdentifier\",$\"SourceCommonName\",$\"DATE\",explode($\"Person\"),$\"Tone\")\n\nval Gkg_person_2 = Gkg_person.withColumn(\"person\",split($\"col\",\",\")(0)).withColumn(\"day\",substring(col(\"DATE\"),6,2)).withColumn(\"month\",substring(col(\"DATE\"),5,2)).withColumn(\"year\",substring(col(\"DATE\"), 0,4)).drop(\"col\",\"DATE\")\n\nval Gkg_person_final = Gkg_person_2.dropDuplicates(\"DocumentIdentifier\", \"Person\").filter(!($\"person\" === \"\")).cache\n\nval Gkg_person_tone = Gkg_person_final.select(\"SourceCommonName\",\"day\",\"month\",\"year\",\"person\",\"tone\").groupBy(\"SourceCommonName\",\"day\",\"month\",\"year\",\"person\").agg(mean(\"tone\"),count(\"SourceCommonName\")).withColumnRenamed(\"count(SourceCommonName)\",\"NbArticles\").cache()\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757077_-141690019","id":"20200123-105951_1635044144","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2203"},{"title":"Transfert vers cassandra","text":"val DF_RQ_3_2_low = Gkg_person_tone.toDF(Gkg_person_tone.columns map(_.toLowerCase): _*)\n                                 .withColumnRenamed(\"avg(tone)\", \"avg_tone\")\n                                 .filter($\"sourcecommonname\"=!=\"\")\n                                 .filter($\"day\"=!=\"\")\n                                 .filter($\"month\"=!=\"\")\n                                 .filter($\"year\"=!=\"\")\n                                 .filter($\"person\"=!=\"\")\n\n       \nDF_RQ_3_2_low.write.mode(\"append\")\n             .format(\"org.apache.spark.sql.cassandra\")\n             .options(Map(\"table\" -> \"requete_3_2\", \"keyspace\" -> \"gdelt\"))\n             .save()\n           ","user":"anonymous","dateUpdated":"2020-02-04T16:20:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757078_479159901","id":"20200123-172422_817436251","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2204"},{"text":"// Creation de dataframe pour obtenir les lieux / date / ton moyen\n\nval question3Df_locations = Gkg_DF.select(\"SourceCommonName\",\"DATE\",\"DocumentIdentifier\",\"V2Locations\",\"V2Tone\")\n                                .filter($\"V2Locations\" !== \"\")\n                                .withColumn(\"V2Tone_split\",split($\"V2Tone\", \",\").getItem(0))\n                                .withColumn(\"V2Tone_float\",col(\"V2Tone_split\").cast(\"Float\"))\n                                .filter($\"V2Tone_float\".isNotNull)\n                                .withColumn(\"Locations_split\", split($\"V2Locations\", \";\"))\n                                .withColumn(\"locations_unique\",explode($\"Locations_split\"))\n                                .withColumn(\"Locations_full\", split($\"locations_unique\", \"#\").getItem(1))\n                                .withColumn(\"Locations\", split($\"Locations_full\", \",\").getItem(0))\n                                .withColumn(\"day\",substring(col(\"DATE\"),6,2)).withColumn(\"month\",substring(col(\"DATE\"),5,2)).withColumn(\"year\",substring(col(\"DATE\"), 0,4)).drop(\"col\",\"DATE\")\n                                .drop($\"V2Locations\")\n                                .drop($\"Locations_split\")\n                                .drop($\"locations_unique\")\n                                .drop($\"Locations_full\")\n                                .drop($\"V2Tone\")\n                                .drop($\"V2Tone_split\")\n                                .drop(\"DocumentIdentifier\")\n                                .groupBy(\"SourceCommonName\",\"day\",\"month\",\"year\",\"Locations\")\n                                .agg(mean(\"V2Tone_float\"),count(\"SourceCommonName\")).withColumnRenamed(\"count(SourceCommonName)\",\"NbArticles\")\n                                .cache()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757078_237037747","id":"20200123-105932_827803479","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2205"},{"title":"Transfert vers cassandra","text":"val DF_RQ_3_3_low = question3Df_locations.toDF(question3Df_locations.columns map(_.toLowerCase): _*)\n                                 .withColumnRenamed(\"avg(V2Tone_float)\", \"avg_v2tone\")\n                                 .filter($\"sourcecommonname\"=!=\"\")\n                                 .filter($\"day\"=!=\"\")\n                                 .filter($\"month\"=!=\"\")\n                                 .filter($\"year\"=!=\"\")\n                                 .filter($\"locations\"=!=\"\")\n\n       \nDF_RQ_3_3_low.write.mode(\"append\")\n             .format(\"org.apache.spark.sql.cassandra\")\n             .options(Map(\"table\" -> \"requete_3_3\", \"keyspace\" -> \"gdelt\"))\n             .save()\n           \n","user":"anonymous","dateUpdated":"2020-02-04T16:20:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757078_-1890363204","id":"20200123-173442_641247076","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2206"},{"title":"Requête 4","text":"//fonction pour couper la date\nval slice = udf((string : String, from : Int, to : Int) => string.slice(from,to))\n//on ne prend en compte que les articles avec actor1 et actor2\n\n// on selectionne le nombre de colonnes sur chaque DF avant d'effectuer le join \n\nval eventDF_selected  = EventDF.select(\"GLOBALEVENTID\",\"Day\",\"MonthYear\",\"Year\",\"Actor1Name\",\"Actor1CountryCode\",\"Actor2Name\",\"Actor2CountryCode\",\"NumMentions\",\"NumArticles\",\"AvgTone\",\"ActionGeo_FullName\",\"ActionGeo_CountryCode\").cache()\n\nval mentionDF_selected = mentionDF.select(\"GLOBALEVENTID\",\"EventTimeDate\",\"MentionTimeDate\",\"MentionSourceName\",\"MentionIdentifier\",\"MentionDocTone\",\"MentionDocTranslationInfo\").cache()\n\n//JOIN eventDF_selected with mentionDF_selected ON GLOBALEVENTID   \nval event_mention_DF = eventDF_selected.join(mentionDF_selected,\"GlobalEventID\").cache()\n","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757078_1009845370","id":"20200122-182249_167540912","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2207"},{"text":"val  question4Df = event_mention_DF.select(\"Actor1CountryCode\",\"Actor2CountryCode\",\"GLOBALEVENTID\",\"MentionTimeDate\",\"MentionIdentifier\",\"MentionDocTone\")\n                            .filter($\"Actor1CountryCode\" =!= \"\")\n                            .filter($\"Actor2CountryCode\" =!= \"\")\n                            .filter($\"Actor1CountryCode\" =!= $\"Actor2CountryCode\")       \n                            .withColumn(\"CountryPair\", array(event_mention_DF(\"Actor1CountryCode\"), event_mention_DF(\"Actor2CountryCode\")))\n                            .withColumn(\"CountryPair_sorted\", sort_array($\"CountryPair\"))                                                             \n                            .withColumn(\"YEAR\", slice($\"MentionTimeDate\",lit(0),lit(4)))\n                            .withColumn(\"MONTH\", slice($\"MentionTimeDate\",lit(4),lit(6)))\n                            .withColumn(\"DAY\", slice($\"MentionTimeDate\",lit(6),lit(8)))\n\n// question4Df.show()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757079_-1004487006","id":"20200123-102708_1210920692","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2208"},{"text":"//jour\nval question4Df_jour = question4Df\n            .groupBy(\"CountryPair_sorted\",\"DAY\",\"MONTH\",\"YEAR\")\n            .agg(countDistinct($\"MentionIdentifier\") as \"distinct_count\", mean(\"MentionDocTone\").as(\"Tone_mean\"))\n            .withColumn(\"Country1\",$\"CountryPair_sorted\"(0))\n            .withColumn(\"Country2\",$\"CountryPair_sorted\"(1))\n            .withColumnRenamed(\"DAY\", \"jour\")\n            .withColumnRenamed(\"MONTH\", \"mois\")\n            .withColumnRenamed(\"YEAR\", \"annee\")                                                                          \n            .withColumnRenamed(\"GLOBALEVENTID\", \"evenement\")\n            .withColumnRenamed(\"distinct_count\", \"nombre_article\")\n            .drop(\"CountryPair_sorted\")\n\n// question4Df_jour.show()","user":"anonymous","dateUpdated":"2020-02-04T16:12:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757079_144836033","id":"20200121-192148_44959180","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2209"},{"title":"Transfert vers cassandra","text":"val DF_RQ_4_low = question4Df_jour.toDF(question4Df_jour.columns map(_.toLowerCase): _*)\n\n       \nDF_RQ_4_low.write.mode(\"append\")\n           .format(\"org.apache.spark.sql.cassandra\")\n           .options(Map(\"table\" -> \"requete_4\", \"keyspace\" -> \"gdelt\"))\n           .save()\n           ","user":"anonymous","dateUpdated":"2020-02-04T16:20:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1580832757079_-1886517184","id":"20200123-174359_158554219","dateCreated":"2020-02-04T16:12:37+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2210"}],"name":"Bucket to Cassandra","id":"2EZU4AP3Y","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}